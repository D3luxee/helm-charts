image:
  # image.repository -- image repository
  repository: gitlab/gitlab-ee
  # image.tag -- image tag (chart's appVersion value will be used if not set)
  tag: ""
  # image.pullPolicy -- image pull policy
  pullPolicy: IfNotPresent

# imagePullSecrets -- image pull secret for private images
imagePullSecrets: []
# nameOverride -- override name of the chart
nameOverride: ""
# fullnameOverride -- full name of the chart.
fullnameOverride: ""

serviceAccount:
  # serviceAccount.create -- specifies whether a service account should be created
  create: false
  # serviceAccount.annotations -- annotations to add to the service account
  annotations: {}
  # serviceAccount.name -- the name of the service account to use; if not set and create is true, a name is generated using the fullname template
  name:

# podSecurityContext -- specifies security settings for a pod
podSecurityContext: {}
#  fsGroup: 2000

# securityContext -- specifies security settings for a container
securityContext:
  privileged: true

service:
  # service.type -- service type
  type: ClusterIP
  # service.loadBalancerIP -- load balancer IP
  loadBalancerIP: null
  # service.ports -- service ports
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
    - name: ssh
      port: 22
      targetPort: ssh
  # service.annotations -- service annotations
  annotations: {}
  # static-ip: gitlab

# resources -- custom resource configuration
resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

# nodeSelector -- node for scheduler pod assignment
nodeSelector: {}

# tolerations -- tolerations for scheduler pod assignment
tolerations: []

# affinity -- affinity for scheduler pod assignment
affinity: {}

# volumeMounts -- additional volume mounts
volumeMounts: []
#  - name: some
#    mountPath: /volume

# volumes -- volumes
volumes:
  - name: data
    emptyDir: {}
  - name: config
    emptyDir: {}
  - name: logs
    emptyDir: {}

# volumeClaimTemplates -- volume claim templates
volumeClaimTemplates: []
#  - apiVersion: v1
#    kind: PersistentVolumeClaim
#    metadata:
#      name: data
#    spec:
#      accessModes:
#        - ReadWriteOnce
#      resources:
#        requests:
#          storage: 10Gi

livenessProbe:
  # livenessProbe.initialDelaySeconds -- initial delay in seconds
  initialDelaySeconds: 90
  httpGet:
    # livenessProbe.httpGet.path -- path for liveness probe
    path: /-/liveness
    # livenessProbe.httpGet.port -- port for liveness probe
    port: http

readinessProbe:
  # readinessProbe.initialDelaySeconds -- initial delay in seconds
  initialDelaySeconds: 90
  httpGet:
    # readinessProbe.httpGet.path -- path for readiness probe
    path: /-/readiness
    # readinessProbe.httpGet.port -- port for readiness probe
    port: http

# env -- environment variables for the container
env: []
#  - name: POSTGRES_HOST
#    value: postgres
#  - name: POSTGRES_PASSWORD
#      valueFrom:
#        secretKeyRef:
#          name: gitlab-pg
#          key: postgres-password

# envFrom -- environment variable sources for the container
envFrom: []
#  - configMapRef:
#      name: gitlab-cm

# gitlabConf -- config for gitlab.rb https://docs.gitlab.com/omnibus/settings/configuration.html
gitlabConf: |-
  external_url 'https://gitlab.example.com'
  gitlab_rails['initial_root_password'] = ENV['GITLAB_INITIAL_ROOT_PASSWORD']

backupCronJob:
  # backupCronJob.enabled -- enable scheduled backups
  enabled: true
  # backupCronJob.schedule -- how often to run backaup job
  schedule: "@daily"
  # backupCronJob.image -- image
  image: wernight/kubectl
  # backupCronJob.command -- command to execute in gitlab container
  command:
    - gitlab-backup
    - create
    - SKIP=uploads,builds,artifacts,registry,pages
    - GZIP_RSYNCABLE=yes
    - STRATEGY=copy
