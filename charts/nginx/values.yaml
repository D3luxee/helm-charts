# Default values for nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  # Tag from chart's appVersion value will be used if not set
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

volumeMounts: []
  # - name: cache
  #   mountPath: /data/nginx/cache

volumes: []
  # - name: cache
  #   emptyDir: {}

livenessProbe:
  httpGet:
    path: /
    port: http

readinessProbe:
  httpGet:
    path: /
    port: http

env: []
  # - name: SAMPLE
  #   value: text

nginxConf: |-
  # nginx version: ENV_NGINX_VERSION_ENV
  user             nginx;
  worker_processes auto;
  error_log        /var/log/nginx/error.log warn;
  pid              /var/run/nginx.pid;
  events {
      worker_connections 1024;
  }
  http {
      include           /etc/nginx/mime.types;
      default_type      application/octet-stream;
      log_format        main '$remote_addr - $remote_user [$time_local] "$request" '
                             '$status $body_bytes_sent "$http_referer" '
                             '"$http_user_agent" "$http_x_forwarded_for" '
                             '$request_time $upstream_response_time $pipe';
      access_log        /var/log/nginx/access.log main;
      sendfile          on;
      keepalive_timeout 65;
      server {
          listen      80;
          server_name localhost;
          location / {
              default_type text/plain;
              access_log   off;
              error_log    off;
              return 200   'ok';
          }
      }
  }

useDebugBinary: false
